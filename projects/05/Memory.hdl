// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // ram load if load && address[14] == 0
    Not(in=address[14], out=isRamAddr);
    And(a=load, b=isRamAddr, out=ramLoad);

    // screen load if load && addr14 && !addr13
    Not(in=address[13], out=notAddr13);
    And(a=address[14], b=notAddr13, out=isScreenAddr);
    And(a=load, b=isScreenAddr, out=screenLoad);

    // keyboard load if load && addr14 && addr13 && !notaddr[0..12]
    Or8Way(in=address[0..7], out=addr0to7HasBitSet);
    Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=addr8to12HasBitSet);
    Or(a=addr0to7HasBitSet, b=addr8to12HasBitSet, out=addr0to12HasBitSet);
    Not(in=addr0to12HasBitSet, out=addr0to12Unset);
    And(a=address[14], b=address[13], out=addr13and14Set);
    And(a=addr0to12Unset, b=addr13and14Set, out=isKeyboardAddr);

    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);

    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);

    Keyboard(out=keyboardOut);

    Or(a=isRamAddr, b=isKeyboardAddr, out=sel0);
    Or(a=isScreenAddr, b=isKeyboardAddr, out=sel1);

    Mux4Way16(a=false, b=ramOut, c=screenOut, d=keyboardOut,
              sel[0]=sel0, sel[1]=sel1, out=out);
}
